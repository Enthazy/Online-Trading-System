package controller.presenters;

import view.View;
import java.time.LocalDate;
import java.util.*;

public class ControllerPresenter {

    Map<String, String> messages = new HashMap<String, String>();

    View view;


    /**
     * Initializes this class.
     * @param view View
     */
    public ControllerPresenter(View view) {
        this.view = view;

        //Transaction
        this.messages.put("Selected", "You selected ");
        this.messages.put("promptDateAgain", "You have to a valid date. Please try again!");
        this.messages.put("FutureDate", "You have to enter a date in the future. Please try again!");
        this.messages.put("NoOpenTransaction", "There are no open transactions!");
        this.messages.put("NoTransactionHistory", "There is no transaction history");
        this.messages.put("NoTrade", "You have not traded yet!");
        this.messages.put("EditSuccess", "You have edited Successfully!");
        this.messages.put("SecondMeetingEditSuccess", "You have edited Successfully! However, the date of the second meeting cannot be changed since the interval between meetings is fixed by trading rule.");
        this.messages.put("AgreeMeeting", "You have agreed to the meeting successfully!");
        this.messages.put("ConfirmMeeting", "You have confirmed to the meeting successfully!");
        this.messages.put("TwoWayTrade",
                "This is the wish list of the owner of the item you just selected. \n" +
                        " Please choose an item number that you want to lend to the user. \n" +
                        "Type exit to go back to the upper menu.");
        this.messages.put("SomethingWentWrong", "Something went wrong.");
        this.messages.put("WrongMeetingId", "The meeting ID you just selected does not exist!");
        this.messages.put("WaitForOther", "You cannot edit or agree this meeting, because you are the last person editing this" +
                "meeting. You need to wait for the other user to edit or agree this meeting.");
        this.messages.put("NotAgreed","This meeting is not agreed yet. Please agree this meeting first.");
        this.messages.put("ConfirmedBefore","You have confirmed this meeting before." );
        this.messages.put("EnterValidMeetingId", "Please enter a valid meeting ID");

        //User/Inventory
        this.messages.put("AddItemSuccess", "You have added the item successfully!");
        this.messages.put("FreezeUser", "This user has been frozen!");
        this.messages.put("NoFreezeSuggestions", "There are no users freeze suggestions generated by the system.\r\nUsers must must either have too many incompleted transactions, or have conducted too many trades.");
        this.messages.put("UnfreezeUser", "You have unfrozen this user successfully!");
        this.messages.put("NoUsersFreeze", "There are no users to unfreeze");
        this.messages.put("FreezeUserPrompt", "Please enter a valid input corresponding to the user you would like to freeze, or type 'exit' to go back.");
        this.messages.put("FreezeUserValidInput", "Please enter a valid input corresponding to the user you would like to freeze, or type 'exit' to go back.");
        this.messages.put("UnfFreezeUserValidInput", "Please enter a valid input corresponding to the user you would like to unfreeze, or type 'exit' to go back..");
        this.messages.put("ChooseItemToConfirm", "Please choose an item, or type 'exit' to go back to the previous menu");
        this.messages.put("NoItemApprove", "There are no items to be approved!");
        this.messages.put("NoItemInventory", "You have no inventory yet! Start using our app today!");
        this.messages.put("noAvailableItems", "Others have not uploaded items for trading. Please be patient!");
        this.messages.put("addNewItem","Please enter the name of the Item you would like to add: ");
        this.messages.put("nonBlankValue", "Please enter a non-blank value.");
        this.messages.put("AddDescription", "Please enter the description to the item you would like to add: ");
        this.messages.put("AddedItem", "Item Successfully Added!\r\n" +
                "It will not show up in your inventory until an administrator has approved it. ");
        this.messages.put("NotAddedItem", "Error. Item was not added. ");
        this.messages.put("newpassword", "Please enter the new password: ");
        this.messages.put("successpassword", "Password updated successfully!");
        this.messages.put("failpassword", "Password updated failed.");
        this.messages.put("UnfreezeReq", "Do you want to request the admin to unfreeze your account?");
        this.messages.put("RequestSend", "Request sent to the administrators. Please wait patiently!");
        this.messages.put("NoItemOther", "There are no items that other users hold! Please wait patiently until other users start adding items!");
        this.messages.put("NoItemWishlist","You have not added any item to your wish list yet!");
        this.messages.put("YesNo", "Please enter y for yes, or n for no.");
        this.messages.put("WantYesOrNo", "You must enter either y for yes or n for no");
        this.messages.put("AddToWishlist","Do you want to add this item to your wishlist?");
        this.messages.put("ChooseItemToRemoveFromWishlist", "Please choose an item to remove from the wishlist, or type 'exit' to go back");
        this.messages.put("promoteUserPrompt", "Please choose a user to promote to administrator, or type 'exit' to go back");
        this.messages.put("invalidIntegerInput", "Please enter a valid number");

        //Menu
        this.messages.put("InvalidOption", "You selected an invalid option. Please try again.");
        this.messages.put("alreadyAtRoot", "You are already at the root menu!");
        this.messages.put("chooseOption", "Please choose an option by entering the corresponding number, or type 'exit' go to back to the previous menu: ");

        //Menu option name:
        this.messages.put("root", "root");
        this.messages.put("isAdmin", "isAdmin");
        this.messages.put("isFrozen", "isFrozen");
        this.messages.put("isNotFrozen","isNotFrozen");
        this.messages.put("canLend","canLend");
        this.messages.put("canBorrow","canBorrow");
        this.messages.put("showTrade","showTrade");
        this.messages.put("register", "register");
        this.messages.put("Register Menu","Register Menu");
        this.messages.put("login", "login");
        this.messages.put("login Menu","login Menu");
        this.messages.put("inventory", "inventory");
        this.messages.put("Inventory Menu","Inventory Menu");
        this.messages.put("wishlist", "wishlist");
        this.messages.put("Wishlist Menu","Wishlist Menu");
        this.messages.put("transaction", "transaction");
        this.messages.put("Transaction Menu","Transaction Menu");
        this.messages.put("admin", "admin");
        this.messages.put("Admin Menu","Admin Menu");
        this.messages.put("setting", "setting");
        this.messages.put("Setting","Setting");
        this.messages.put("showMyInventory", "showMyInventory");
        this.messages.put("Show My Inventory","Show My Inventory");
        this.messages.put("addItem", "addItem");
        this.messages.put("Add Item to Inventory","Add Item to Inventory");
        this.messages.put("viewAvailableItems", "viewAvailableItems");
        this.messages.put("View Available Items","View Available Items");
        this.messages.put("addToWishlist", "addToWishlist");
        this.messages.put("Add Item To Wishlist","Add Item To Wishlist");
        this.messages.put("showMyWishlist", "showMyWishlist");
        this.messages.put("Show My Wishlist","Show My Wishlist");
        this.messages.put("Do you want to remove this item from the wishlist?","Do you want to remove this item from the wishlist?");
        this.messages.put("RemoveItemSuccess","Successfully Removed Item.");
        this.messages.put("updatePassword", "updatePassword");
        this.messages.put("Update Password","Update Password");
        this.messages.put("requestUnfreeze", "requestUnfreeze");
        this.messages.put("Request Unfreeze of Account","Request Unfreeze of Account");
        this.messages.put("startNewTransaction", "startNewTransaction");
        this.messages.put("Start A Transaction","Start A Transaction");
        this.messages.put("viewOpenTransactions", "viewOpenTransactions");
        this.messages.put("View Open Transactions","View Open Transactions");
        this.messages.put("viewTransactionHistory", "viewTransactionHistory");
        this.messages.put("View Transaction History","View Transaction History");
        this.messages.put("viewFrequentPartner", "viewFrequentPartner");
        this.messages.put("View Most Frequent Trading Partner","View Most Frequent Trading Partner");
        this.messages.put("oneWay", "oneWay");
        this.messages.put("Initiate a one-way trade","Initiate a one-way trade");
        this.messages.put("twoWay", "twoWay");
        this.messages.put("Initiate a two-way trade","Initiate a two-way trade");
        this.messages.put("permanent", "permanent");
        this.messages.put("Make Trade Permanent","Make Trade Permanent");
        this.messages.put("temporary", "temporary");
        this.messages.put("Make Trade Temporary","Make Trade Temporary");
        this.messages.put("meeting", "meeting");
        this.messages.put("Edit & Confirm Meetings","Edit & Confirm Meetings");
        this.messages.put("edit", "edit");
        this.messages.put("Edit a Meeting","Edit a Meeting");
        this.messages.put("agree", "agree");
        this.messages.put("Agree To a Meeting", "Agree To a Meeting");
        this.messages.put("confirm","confirm");
        this.messages.put("Confirm a Meeting Has Taken Place", "Confirm a Meeting Has Taken Place");
        this.messages.put("freeze", "freeze");
        this.messages.put("Freeze a User", "Freeze a User");
        this.messages.put("viewUnfreeze", "viewUnfreeze");
        this.messages.put("View Unfreeze Requests from Users", "View Unfreeze Requests from Users");
        this.messages.put("approveItem", "approveItem");
        this.messages.put("Approve New Items", "Approve New Items");
        this.messages.put("makeAdmin", "makeAdmin");
        this.messages.put("Promote a User to Admin", "Promote a User to Admin");
        this.messages.put("changeConfig", "changeConfig");
        this.messages.put("Change Configuration", "Change Configuration");

        //User
        this.messages.put("successfulLogin", "Login was successful.");
        this.messages.put("tooManyLoginAttempts", "You have tried to log in too many times... Aborting.");
        this.messages.put("duplicateUsername","There is already a user with this name. Choose a different user name.\n\r");
        this.messages.put("generalError", "Oops. There's been a general error with the program.");
        this.messages.put("registrationSuccessful", "Registration was successful! You can proceed to log in now with your new account.");
        this.messages.put("PromoteUser", "You have successfully promoted this user to admin");
        this.messages.put("NoPromoteUser", "There are no users that you can promote to admin");
        this.messages.put("MaxTransactionPerWeek", "Please enter an integer corresponding to the maximum number of transactions allowed per user per week.");
        this.messages.put("printing", "PRINTING");
        this.messages.put("MaxIncompleteTransactions", "Please enter an integer corresponding to the maximum number of incomplete transactions allowed per user.");
        this.messages.put("editMaxMeetings", "Please enter an integer corresponding to the maximum number of meeting edits before a transaction is cancelled.");

        // TradeDataPresenter
        this.messages.put("NoSuchTransaction", "There is no such transaction!");
        this.messages.put("YourOpenTransaction", "These are your open transactions, please select a meeting by entering the corresponding " +
                "meeting ID and press 'Enter' to confirm. Enter 'exit' to go back to the upper menu.");
        this.messages.put("DotLine", "--------------------------------------------------------------------------");
        this.messages.put("NO.", "NO.");
        this.messages.put(":", ": ");
        this.messages.put("EnterValidMessage", "Please enter a valid value.");
        this.messages.put("ChooseFromInventoryPrompt", "Please choose from the available inventory");
        this.messages.put("noWishListOneWayTradeOnly", "The owner of the item you just selected has no wish list, so you can only make a one-way trade.");
        this.messages.put("RootMenuMessage", "You are already at the root menu!");
        this.messages.put("SelectOptionMessage","Please choose an option by entering the corresponding number, or type 'exit' go to back to the previous menu: ");

    }


    /**
     * Display the message for stating a transaction.
     * @param tradeIds A list of ids representing trades
     * @param meetingIds A list of ides representing meeting ids.
     * @param transID The transaction id.
     */
    public void displayInitTransaction(List<Integer> tradeIds, List<Integer> meetingIds, int transID ){
        view.display("All done! Your trade IDs are " + tradeIds + ", meeting IDs are " + meetingIds + " and " +
                "transaction IDs are " + transID + ".");
    }

    /**
     * Display the transaction details.
     * @param tranId The transaction id.
     */
    public void displayTransactionPresenter(int tranId){
        view.display("The transaction with transactionID " + tranId + " contains meetings and trades: ");
    }

    /**
     * Output the information about a trade.
     * @param tID Trade Id
     * @param lender The lender's user id
     * @param borrower The borrower's user id
     * @param name The name of the item traded
     * @param description The description of the item traded.
     */
    public void displayTradePresenter(int tID, int lender, int borrower, String name, String description){
        view.display("Trade ID: " + tID + "; Lender ID: " + lender + "; Borrower ID: " + borrower +
                "; Traded item with name '" + name + "', and description, '" + description + "'.");
    }

    /**
     * Output information about a meeting
     * @param mID The meeting id.
     * @param date The date of the meeting.
     * @param location The location of the meeting.
     */
    public void displayMeetingPresenter(int mID, LocalDate date, String location){
        view.display("Meeting ID: " + mID + "; Meeting date: " + date + "; Meeting location: " +
                location + ".");
    }

    /**
     * Get the corresponding string for the input key
     * @param key The key corresponding to the message desired.
     */
    public void get(String key) {
        String message = this.messages.get(key);
        view.display("--------------------------------------------\n\r" + message);
    }

    /**
     * Get the corresponding string for the input key with a text
     * @param key The key corresponding to the message desired.
     * @param text The text to append to this message.
     */
    public void get(String key, String text){
        String message = this.messages.get(key);
        view.display(message + text);
    }


    /**
     * Displays menu.
     * @param menuList A list of menu items to display
     */
    public void menuDisplay(List<String> menuList){
        displayList(menuList);
    }


    /**
     * Displays a list of items.
     * @param list A list of items to display.
     */
    public void displayList(List<String> list) {
        int len = list.size();
        for (int i = 0; i < len; i++) {
            System.out.print(i+1);
            System.out.print(". ");
            System.out.print(list.get(i).concat("  "));
        }
        view.display("");

    }


    /**
     * Displays items.
     * @param name The name of the item
     * @param description The description of the item.
     */
    public void displayItem(String name, String description) {
        view.display("Item name:" + name + "\r\n" + "Item description:" + description);
    }


    /**
     * Displays a message.
     * @param message The message to be displayed.
     */
    public void display(String message){
        view.display(message);
    }



}
